import tkinter as tk
from tkinter import ttk
import pickle


class Employee:
    """Class to represent an employee"""
    def __init__(self, name="", employee_id="", department="", job_title="", basic_salary=0, age=0, dob="", passport_details=""):
        self.name = name
        self.employee_id = employee_id
        self.department = department
        self.job_title = job_title
        self.basic_salary = basic_salary
        self.age = age
        self.dob = dob
        self.passport_details = passport_details


class Event:
    """Class to represent an event"""
    def __init__(self, event_id="", event_type="", theme="", date="", time="", duration="", venue_address="", client_id="", guest_list=[], catering_company="", cleaning_company="", decorations_company="", entertainment_company="", furniture_supply_company="", invoice=""):
        self.event_id = event_id
        self.event_type = event_type
        self.theme = theme
        self.date = date
        self.time = time
        self.duration = duration
        self.venue_address = venue_address
        self.client_id = client_id
        self.guest_list = guest_list
        self.catering_company = catering_company
        self.cleaning_company = cleaning_company
        self.decorations_company = decorations_company
        self.entertainment_company = entertainment_company
        self.furniture_supply_company = furniture_supply_company
        self.invoice = invoice


class Client:
    """Class to represent a client"""
    def __init__(self, client_id="", name="", address="", contact_details="", budget=0):
        self.client_id = client_id
        self.name = name
        self.address = address
        self.contact_details = contact_details
        self.budget = budget


class Guest:
    """Class to represent a guest"""
    def __init__(self, guest_id="", name="", address="", contact_details=""):
        self.guest_id = guest_id
        self.name = name
        self.address = address
        self.contact_details = contact_details

class Supplier:
    """Class to represent a supplier"""
    def __init__(self, supplier_id="", name="", address="", contact_details="", menu="", min_guests=0, max_guests=0):
        self.supplier_id = supplier_id
        self.name = name
        self.address = address
        self.contact_details = contact_details
        self.menu = menu
        self.min_guests = min_guests
        self.max_guests = max_guests


class DataHandler:
    """Class to handle reading and writing to data files using Pickle"""
    @staticmethod
    def write_to_file(data, filename):
        with open(filename, 'wb') as f:
            pickle.dump(data, f)

    @staticmethod
    def read_from_file(filename):
        with open(filename, 'rb') as f:
            data = pickle.load(f)
        return data


class EmployeeGUI:
    """Class to handle GUI operations related to employees"""
    def __init__(self, root):
        self.root = root
        self.root.geometry("300x200")
        self.root.title("Employee Details")

        self.name_label = tk.Label(self.root, text="Name:")
        self.name_label.grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        self.name_entry = tk.Entry(self.root)
        self.name_entry.grid(column=1, row=0, sticky=tk.E, padx=5, pady=5)

        self.employee_id_label = tk.Label(self.root, text="Employee ID:")
        self.employee_id_label.grid(column=0, row=1, sticky=tk.W, padx=5, pady=5)
        self.employee_id_entry = tk.Entry(self.root)
        self.employee_id_entry.grid(column=1, row=1, sticky=tk.E, padx=5, pady=5)

        self.department_label = tk.Label(self.root, text="Department:")
        self.department_label.grid(column=0, row=2, sticky=tk.W, padx=5, pady=5)
        self.department_entry = tk.Entry(self.root)
        self.department_entry.grid(column=1, row=2, sticky=tk.E, padx=5, pady=5)

        self.job_title_label = tk.Label(self.root, text="Job Title:")
        self.job_title_label.grid(column=0, row=3, sticky=tk.W, padx=5, pady=5)
        self.job_title_entry = tk.Entry(self.root)
        self.job_title_entry.grid(column=1, row=3, sticky=tk.E, padx=5, pady=5)

        self.basic_salary_label = tk.Label(self.root, text="Basic Salary:")
        self.basic_salary_label.grid(column=0, row=4, sticky=tk.W, padx=5, pady=5)
        self.basic_salary_entry = tk.Entry(self.root)
        self.basic_salary_entry.grid(column=1, row=4, sticky=tk.E, padx=5, pady=5)

        self.age_label = tk.Label(self.root, text="Age:")
        self.age_label.grid(column=0, row=5, sticky=tk.W, padx=5, pady=5)
        self.age_entry = tk.Entry(self.root)
        self.age_entry.grid(column=1, row=5, sticky=tk.E, padx=5, pady=5)

        self.dob_label = tk.Label(self.root, text="Date of Birth:")
        self.dob_label.grid(column=0, row=6, sticky=tk.W, padx=5, pady=5)
        self.dob_entry = tk.Entry(self.root)
        self.dob_entry.grid(column=1, row=6, sticky=tk.E, padx=5, pady=5)

        self.passport_details_label = tk.Label(self.root, text="Passport Details:")
        self.passport_details_label.grid(column=0, row=7, sticky=tk.W, padx=5, pady=5)
        self.passport_details_entry = tk.Entry(self.root)
        self.passport_details_entry.grid(column=1, row=7, sticky=tk.E, padx=5, pady=5)

        self.submit_button = tk.Button(self.root, text="Submit", command=self.submit)
        self.submit_button.grid(column=1, row=8, sticky=tk.E, padx=5)



    def clear_boxes(self):
        """Clear all entry boxes"""
        self.name_entry.delete(0, tk.END)
        self.employee_id_entry.delete(0, tk.END)
        self.department_entry.delete(0, tk.END)
        self.job_title_entry.delete(0, tk.END)
        self.basic_salary_entry.delete(0, tk.END)
        self.age_entry.delete(0, tk.END)
        self.dob_entry.delete(0, tk.END)
        self.passport_details_entry.delete(0, tk.END)

    def submit(self):
        """Get values from entry boxes and create Employee object"""
        name = self.name_entry.get()
        employee_id = self.employee_id_entry.get()
        department = self.department_entry.get()
        job_title = self.job_title_entry.get()
        basic_salary = float(self.basic_salary_entry.get())
        age = int(self.age_entry.get())
        dob = self.dob_entry.get()
        passport_details = self.passport_details_entry.get()

        employee = Employee(name, employee_id, department, job_title, basic_salary, age, dob, passport_details)
        all_employees[employee_id] = employee

        # Clear entry boxes after submission
        self.clear_boxes()
        print("Employee added successfully. Employee ID:", employee_id)


class App:
    """Main application class"""
    def __init__(self):
        self.root = tk.Tk()
        self.root.geometry("400x300")
        self.root.title("Event Management System")

        self.tabControl = ttk.Notebook(self.root)

        # Create tabs
        self.employee_tab = ttk.Frame(self.tabControl)
        self.tabControl.add(self.employee_tab, text='Employees')
        self.tabControl.pack(expand=1, fill='both')


        # Create GUI for managing employees
        self.employee_gui = EmployeeGUI(self.employee_tab)

        self.root.mainloop()

















class SalesManager(Employee):
    """Class to represent a sales manager."""
    def __init__(self, name="", address="", contact_details="", employee_id=0, basic_salary=0.0, manager_id=0):
        super().__init__(name, address, contact_details, employee_id, "Sales", "Sales Manager", basic_salary, manager_id)

class Salesperson(Employee):
    """Class to represent a salesperson."""
    def __init__(self, name="", address="", contact_details="", employee_id=0, basic_salary=0.0, manager_id=0):
        super().__init__(name, address, contact_details, employee_id, "Sales", "Salesperson", basic_salary, manager_id)

class MarketingManager(Employee):
    """Class to represent a marketing manager."""
    def __init__(self, name="", address="", contact_details="", employee_id=0, basic_salary=0.0, manager_id=0):
        super().__init__(name, address, contact_details, employee_id, "Marketing", "Marketing Manager", basic_salary, manager_id)

class EmployeeForm:
    """Class to represent a GUI form to enter employee details."""
    def __init__(self):
        self.root = tk.Tk()
        self.root.geometry("300x300")
        self.root.title("Employee Form")

        self.name_label = tk.Label(self.root, text="Name:")
        self.name_label.grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        self.name_entry = tk.Entry(self.root)
        self.name_entry.grid(column=1, row=0, sticky=tk.E, padx=5, pady=5)

        # Add more entry fields for other employee attributes

        self.submit_button = tk.Button(self.root, text="Submit", command=self.submit)
        self.submit_button.grid(column=1, row=4, sticky=tk.E, padx=5)
        self.root.mainloop()

    def clear_boxes(self):
        """Clear the entry boxes."""
        self.name_entry.delete(0, tk.END)
        # Add similar lines for other entry fields

    def submit(self):
        """Create an Employee object with entered details."""
        name = self.name_entry.get()
        # Get other entered details
        # Create an Employee object
        employee = Employee(name=name)
        # Add the employee to the system
        # Clear the entry boxes
        self.clear_boxes()
        print("Employee added successfully.")



class Client(Person):
    """Class to represent a client."""
    def __init__(self, name="", address="", contact_details="", client_id=0, budget=0.0):
        super().__init__(name, address, contact_details)
        self.client_id = client_id
        self.budget = budget

class Guest(Person):
    """Class to represent a guest."""
    def __init__(self, name="", address="", contact_details="", guest_id=0, event_id=0):
        super().__init__(name, address, contact_details)
        self.guest_id = guest_id
        self.event_id = event_id

class Event:
    """Class to represent an event."""
    def __init__(self, event_id=0, event_type="", theme="", date="", time="", duration="", venue_address="", client_id=0, guest_list=[], catering_company="", cleaning_company="", decorations_company="", entertainment_company="", furniture_company="", invoice=""):
        self.event_id = event_id
        self.event_type = event_type
        self.theme = theme
        self.date = date
        self.time = time
        self.duration = duration
        self.venue_address = venue_address
        self.client_id = client_id
        self.guest_list = guest_list
        self.catering_company = catering_company
        self.cleaning_company = cleaning_company
        self.decorations_company = decorations_company
        self.entertainment_company = entertainment_company
        self.furniture_company = furniture_company
        self.invoice = invoice

class Supplier:
    """Class to represent a supplier."""
    def __init__(self, supplier_id=0, name="", address="", contact_details="", menu="", min_guests=0, max_guests=0):
        self.supplier_id = supplier_id
        self.name = name
        self.address = address
        self.contact_details = contact_details
        self.menu = menu
        self.min_guests = min_guests
        self.max_guests = max_guests

class ClientForm:
    """Class to represent a GUI form to enter client details."""
    def __init__(self):
        self.root = tk.Tk()
        self.root.geometry("300x300")
        self.root.title("Client Form")

        self.name_label = tk.Label(self.root, text="Name:")
        self.name_label.grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        self.name_entry = tk.Entry(self.root)
        self.name_entry.grid(column=1, row=0, sticky=tk.E, padx=5, pady=5)

        # Add more entry fields for other client attributes

        self.submit_button = tk.Button(self.root, text="Submit", command=self.submit)
        self.submit_button.grid(column=1, row=4, sticky=tk.E, padx=5)
        self.root.mainloop()

    def clear_boxes(self):
        """Clear the entry boxes."""
        self.name_entry.delete(0, tk.END)
        # Add similar lines for other entry fields

    def submit(self):
        """Create a Client object with entered details."""
        name = self.name_entry.get()
        # Get other entered details
        # Create a Client object
        client = Client(name=name)
        # Add the client to the system
        # Clear the entry boxes
        self.clear_boxes()
        print("Client added successfully.")


class GuestForm:
    """Class to represent a GUI form to enter guest details."""
    def __init__(self):
        self.root = tk.Tk()
        self.root.geometry("300x300")
        self.root.title("Guest Form")

        self.name_label = tk.Label(self.root, text="Name:")
        self.name_label.grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        self.name_entry = tk.Entry(self.root)
        self.name_entry.grid(column=1, row=0, sticky=tk.E, padx=5, pady=5)

        # Add more entry fields for other guest attributes

        self.submit_button = tk.Button(self.root, text="Submit", command=self.submit)
        self.submit_button.grid(column=1, row=4, sticky=tk.E, padx=5)
        self.root.mainloop()

    def clear_boxes(self):
        """Clear the entry boxes."""
        self.name_entry.delete(0, tk.END)
        # Add similar lines for other entry fields

    def submit(self):
        """Create a Guest object with entered details."""
        name = self.name_entry.get()
        # Get other entered details
        # Create a Guest object
        guest = Guest(name=name)
        # Add the guest to the system
        # Clear the entry boxes
        self.clear_boxes()
        print("Guest added successfully.")

class EventForm:
    """Class to represent a GUI form to enter event details."""
    def __init__(self):
        self.root = tk.Tk()
        self.root.geometry("300x300")
        self.root.title("Event Form")

        self.event_type_label = tk.Label(self.root, text="Event Type:")
        self.event_type_label.grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        self.event_type_entry = tk.Entry(self.root)
        self.event_type_entry.grid(column=1, row=0, sticky=tk.E, padx=5, pady=5)

        # Add more entry fields for other event attributes

        self.submit_button = tk.Button(self.root, text="Submit", command=self.submit)
        self.submit_button.grid(column=1, row=4, sticky=tk.E, padx=5)
        self.root.mainloop()

    def clear_boxes(self):
        """Clear the entry boxes."""
        self.event_type_entry.delete(0, tk.END)
        # Add similar lines for other entry fields

    def submit(self):
        """Create an Event object with entered details."""
        event_type = self.event_type_entry.get()
        # Get other entered details
        # Create an Event object
        event = Event(event_type=event_type)
        # Add the event to the system
        # Clear the entry boxes
        self.clear_boxes()
        print("Event added successfully.")

class SupplierForm:
    """Class to represent a GUI form to enter supplier details."""
    def __init__(self):
        self.root = tk.Tk()
        self.root.geometry("300x300")
        self.root.title("Supplier Form")

        self.name_label = tk.Label(self.root, text="Name:")
        self.name_label.grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        self.name_entry = tk.Entry(self.root)
        self.name_entry.grid(column=1, row=0, sticky=tk.E, padx=5, pady=5)

        # Add more entry fields for other supplier attributes

        self.submit_button = tk.Button(self.root, text="Submit", command=self.submit)
        self.submit_button.grid(column=1, row=4, sticky=tk.E, padx=5)
        self.root.mainloop()

    def clear_boxes(self):
        """Clear the entry boxes."""
        self.name_entry.delete(0, tk.END)
        # Add similar lines for other entry fields

    def submit(self):
        """Create a Supplier object with entered details."""
        name = self.name_entry.get()
        # Get other entered details
        # Create a Supplier object
        supplier = Supplier(name=name)
        # Add the supplier to the system
        # Clear the entry boxes
        self.clear_boxes()
        print("Supplier added successfully.")
